shadow = false;

# The blur radius for shadows, in pixels. (defaults to 12)
# shadow-radius = 12
shadow-radius = 7;

# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
# shadow-opacity = .75

# The left offset for shadows, in pixels. (defaults to -15)
# shadow-offset-x = -15
shadow-offset-x = -7;

# The top offset for shadows, in pixels. (defaults to -15)
# shadow-offset-y = -15
shadow-offset-y = -7;

# Specify a list of conditions of windows that should have no shadow.
# shadow-exclude = []
shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "_GTK_FRAME_EXTENTS@"
];

# Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
# clip-shadow-above = []

# Crop shadow of a window fully on a particular monitor to that monitor. This is
# currently implemented using the X RandR extension.
# crop-shadow-to-monitor = false


#################################
#           Fading              #
#################################
fading = true;
fade-in-step = 0.03;
fade-out-step = 0.03;
fade-delta = 5

# fade-exclude = []

no-fading-openclose = false
no-fading-destroyed-argb = false
#################################
#   Transparency / Opacity      #
#################################


# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
# inactive-opacity = 1
# 0.8 прозрачность неактивных окон
inactive-opacity = 1;

# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
# frame-opacity = 1.0
frame-opacity = 1.0;

# Enable frame opacity for colors that match the frame
# frame-opacity-for-same-colors = true;

# Tolerance for similar colors (0 exact match, 1 all colors, default 0.5)
# frame-opacity-for-same-colors-constraint = 0.5;

# Make different colors opaque by a factor of x (default 5)
# frame-opacity-for-same-colors-multiplier = 5;

# Let inactive opacity set by -i override the '_NET_WM_WINDOW_OPACITY' values of windows.
# inactive-opacity-override = true
inactive-opacity-override = false;

# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
# active-opacity = 1.0

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
# inactive-dim = 0.0

# Specify a list of conditions of windows that should never be considered focused.
# focus-exclude = []
focus-exclude = [ "class_g = 'Cairo-clock'" ];

opacity-rule = [
"100:class_g = 'URxvt'",
"100:class_g = 'Thunar'",
"100:class_g = 'Google-chrome'",
"100:class_g = 'Firefox' && argb",
"100:fullscreen",
];

# opacity-rule = [
# "100:class_g = 'St' && focused",
# "50:class_g = 'St' && !focused",
# "100:fullscreen",
# ];



#################################
#           Corners             #
#################################

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
corner-radius = 0

# Exclude conditions for rounded corners.
rounded-corners-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'"
];


#################################
#     Background-Blurring       #
#################################
blur-kern = "3x3box";


# Exclude conditions for background blur.
# blur-background-exclude = []
blur-background-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "_GTK_FRAME_EXTENTS@"
];

#################################
#       General Settings        #
#################################

backend = "glx"
dithered-present = false;

# Enable/disable VSync.
vsync = false;

# Try to detect WM windows (a non-override-redirect window with no
# child that has 'WM_STATE') and mark them as active.
#
# mark-wmwin-focused = false
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
# mark-ovredir-focused = false
mark-ovredir-focused = true;

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
#
# detect-rounded-corners = false
detect-rounded-corners = true;

# Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
#
# detect-client-opacity = false
detect-client-opacity = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
# provided that the WM supports it.
#
# use-ewmh-active-win = false

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows.
#
# unredir-if-possible = false

# Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 0

# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
#
# detect-transient = false
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. This usually means windows from the same application
# will be considered focused or unfocused at the same time.
# 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
#
# detect-client-leader = false


# Disable the use of damage information.
# This cause the whole screen to be redrawn every time, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
use-damage = true;

# window-shader-fg-rule = [
#   "my_shader.frag:window_type != 'dock'"
# ]

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
#
# force-win-blend = false

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
#
# no-ewmh-fullscreen = false

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
# transparent-clipping = false

# Specify a list of conditions of windows that should never have transparent
# clipping applied. Useful for screenshot tools, where you need to be able to
# see through transparent parts of the window.
#
# transparent-clipping-exclude = []

log-level = "warn";

# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".

@include "picom-animations.conf"
#################################
#       Animation Settings      #
#################################
wintypes:
{
    dialog = {shadow = false;};
    dnd = {shadow = false;};
    dropdown_menu = {shadow = false;};
    menu = {shadow = false; full-shadow = true;};
    popup_menu = {shadow = false; full-shadow = true;};
    tooltip = {fade = true; shadow = true; full-shadow = false;};
    utility = {shadow = false;};
}
# wintypes:
# {
#   tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
#   dock = { shadow = false; clip-shadow-above = true; }
#   dnd = { shadow = false; }
#   popup_menu = { opacity = 0.8; }
#   dropdown_menu = { opacity = 0.8; }
# };

# window-shader-fg-rule =
# [
#   "shader.frag:name = 'test'",
#   "   shader.frag  :name = 'a'",
#   "default:name = 'b'"
# ]

# animations = ({
#     triggers = ["close", "hide"];
#     offset-y = {
#         start = 0;
#         duration = 0.2;
#         end = "- window-height - window-y";
#     };
#     opacity = 1;
# }, {
#     triggers = ["open"];
#     preset = "slide-in";
#     duration = 1;
# }, {
#     triggers = ["open"];
#     preset = "slide-out";
#     duration = 1;
# }, {
#     triggers = ["open"];
#     preset = "fly-in";
#     duration = 1;
# }, {
#     triggers = ["open"];
#     preset = "fly-out";
#     duration = 1;
# }, {
#     triggers = ["open"];
#     preset = "appear";
#     duration = 1;
# }, {
#     triggers = ["open"];
#     preset = "disappear";
#     duration = 1;
# });




# # animations = ({
# #     triggers = ["close", "hide"];
# #     opacity = {
# #         timing = "0.2s linear";
# #         start = "window-raw-opacity-before";
# #         end = "window-raw-opacity";
# #     };
# #     blur-opacity = "0";
# #     shadow-opacity = "opacity";
# #     offset-x = "(1 - scale-x) / 2 * window-width";
# #     offset-y = "(1 - scale-y) / 2 * window-height";
# #     scale-x = {
# #         timing = "0.2s cubic-bezier(0.21, 0.02, 0.76, 0.36)";
# #         start = 1;
# #         end = 1.04;
# #     };
# #     scale-y = "scale-x";
# #     shadow-scale-x = "scale-x";
# #     shadow-scale-y = "scale-y";
# #     shadow-offset-x = "offset-x";
# #     shadow-offset-y = "offset-y";
# # },
# # {
# #     triggers = ["open", "show"];
# #     opacity = {
# #         timing = "0.2s linear";
# #         start = "window-raw-opacity-before";
# #         end = "window-raw-opacity";
# #     };
# #     blur-opacity = {
# #         timing = "0.1s linear 0.2s";
# #         start = "window-raw-opacity-before";
# #         end = "window-raw-opacity";
# #     };
# #     shadow-opacity = "opacity";
# #     offset-x = "(1 - scale-x) / 2 * window-width";
# #     offset-y = "(1 - scale-y) / 2 * window-height";
# #     scale-x = {
# #         timing = "0.2s cubic-bezier(0.24, 0.64, 0.79, 0.98)";
# #         start = 1.04;
# #         end = 1;
# #     };
# #     scale-y = "scale-x";
# #     shadow-scale-x = "scale-x";
# #     shadow-scale-y = "scale-y";
# #     shadow-offset-x = "offset-x";
# #     shadow-offset-y = "offset-y";
# # },

# # # Half Monitor Size Desktop Switching
# # {
# #     triggers = ["workspace-out"];
# #     offset-y = {
# #         timing = "0.2s cubic-bezier(0.21, 0.02, 0.76, 0.36)";
# #         start = "0";
# #         end = "- window-height / 2";
# #     };
# #     shadow-offset-y = "offset-y";
# #     opacity = {
# #         timing = "0.2s linear";
# #         start = "window-raw-opacity-before";
# #         end = "window-raw-opacity";
# #     };
# #     blur-opacity = "0";
# #     shadow-opacity = "opacity";
# # },
# # {
# #     triggers = ["workspace-out-inverse"];
# #     offset-y = {
# #         timing = "0.2s cubic-bezier(0.21, 0.02, 0.76, 0.36)";
# #         start = "0";
# #         end = "window-height / 2";
# #     };
# #     shadow-offset-y = "offset-y";
# #     opacity = {
# #         timing = "0.2s linear";
# #         start = "window-raw-opacity-before";
# #         end = "window-raw-opacity";
# #     };
# #     blur-opacity = "0";
# #     shadow-opacity = "opacity";
# # },
# # {
# #     triggers = ["workspace-in"];
# #     offset-y = {
# #         timing = "0.2s cubic-bezier(0.24, 0.64, 0.79, 0.98)";
# #         start = "window-height / 2";
# #         end = "0";
# #     };
# #     shadow-offset-y = "offset-y";
# #     opacity = {
# #         timing = "0.2s linear";
# #         start = "0";
# #         end = "window-raw-opacity";
# #     };
# #     blur-opacity = {
# #         timing = "0.1s linear 0.2s";
# #         start = "0";
# #         end = "window-raw-opacity";
# #     };
# #     shadow-opacity = "opacity";
# # },
# # {
# #     triggers = ["workspace-in-inverse"];
# #     offset-y = {
# #         timing = "0.2s cubic-bezier(0.24, 0.64, 0.79, 0.98)";
# #         start = "- window-height / 2";
# #         end = "0";
# #     };
# #     shadow-offset-y = "offset-y";
# #     opacity = {
# #         timing = "0.2s linear";
# #         start = "0";
# #         end = "window-raw-opacity";
# #     };
# #     blur-opacity = {
# #         timing = "0.1s linear 0.2s";
# #         start = "0";
# #         end = "window-raw-opacity";
# #     };
# #     shadow-opacity = "opacity";
# # })
