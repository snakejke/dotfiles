---
#Копирование пользовательских конфигов из ~/.config в ~/.local/dotfiles/
- name: Sync user configuration files and directories
  vars:
    config_directories:
      - emacs/lisp
      - fvwm
      - home-manager 
      - gtk-2.0
      - gtk-3.0
      - lf
      - mpv
      - notmuch
      - picom
      - pipewire
      - python
      - readline
      - rebar3
      - rofi
      - sx
      - xdg-desktop-portal
      - xsettingsd

    config_files:
      - ansible/ansible.cfg
      - containers/registries.conf
      - containers/storage.conf
      - emacs/early-init.el
      - emacs/init-dev.el
      - emacs/init.el
      - emacs/init.org
      - emacs/dict/english-words.txt
      - wireplumber/wireplumber.conf.d/80-disable-logind.conf
      - zsh/.zprofile
      - zsh/.zshenv
      - zsh/.zshrc
      - zsh/aliases
      - mimeapps.list
    ansible_main_files:
      - ansible_main

  block:
    - name: Sync config directories
      synchronize:
        src: "{{ user_config_dir }}/{{ item }}/"
        dest: "{{ dotfiles_dir }}/{{ item }}/"
        delete: yes
        recursive: yes
      loop: "{{ config_directories }}"
      register: dir_sync_result
      changed_when: dir_sync_result.changed

    - name: Sync ansible_main_files
      synchronize:
        src: "{{ home_dir}}/.local/{{ item }}/"
        dest: "{{ dotfiles_dir }}/{{ item }}/"
        delete: yes
        recursive: yes
      loop: "{{ ansible_main_files }}"
      register: dir_sync_result
      changed_when: dir_sync_result.changed


    - name: Sync config files
      synchronize:
        src: "{{ user_config_dir }}/{{ item }}"
        dest: "{{ dotfiles_dir }}/{{ item }}"
        delete: yes
      loop: "{{ config_files }}"
      register: file_sync_result
      changed_when: file_sync_result.changed

    - name: Encrypt sensitive files
      tags: encrypt_sensitive
      block:
        - name: Define sensitive files
          set_fact:
            sensitive_files:
              - { src: "{{ user_config_dir }}/zsh/.zhistory", dest: "{{ dotfiles_dir }}/zsh/.zhistory.gpg" }
              - { src: "{{ user_config_dir }}/zsh/.z", dest: "{{ dotfiles_dir }}/zsh/.z.gpg" }

        - name: Check if sensitive files exist
          stat:
            path: "{{ item.src }}"
          register: sensitive_stat
          loop: "{{ sensitive_files }}"
          loop_control:
            label: "{{ item.src }}"

        - name: Encrypt sensitive files with GPG
          command: >
            gpg --batch --yes --output "{{ item.item.dest }}" --encrypt --recipient "{{ gpg_key_id }}" "{{ item.item.src }}"
          when: item.stat.exists
          loop: "{{ sensitive_stat.results }}"
          register: gpg_encrypt_result
          changed_when: gpg_encrypt_result.rc == 0
          failed_when: gpg_encrypt_result.rc != 0 and gpg_encrypt_result.rc != 2

        - name: Notify about GPG encryption result
          debug:
            msg: "Encryption for {{ item.cmd[item.cmd|length - 1] }} completed."
          loop: "{{ gpg_encrypt_result.results }}"
          when: item.rc is defined and item.rc == 0

