# interpreter for shell commands
set shell sh
set hidden true
set icons
set ignorecase true
set shellopts '-eu'
set ifs "\n"
set previewer lfpreviewer
set cleaner lfcleaner
#set previewer scope
# leave some space at the top and the bottom of the screen
set scrolloff 10
# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f
map e :menu
# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}
map M moveto
cmd moveto ${{
	set -f
	dest=$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs" | fzf --prompt 'Move to where? ' | sed 's|~|$HOME|')
	[ -z "$dest" ] && exit
	destpath=$(eval printf '%s' \"$dest\")
	clear; tput cup $(($(tput lines)/3)); tput bold
	echo "From:"
	echo "$fx" | sed 's/^/   /'
	printf "To:\n   %s\n\n\tmove?[y/N]" "$destpath"
	read -r ans
	[ "$ans" != "y" ] && exit
	for x in $fx; do
		mv -iv "$x" "$destpath"
	done &&
	notify-send "üöö File(s) moved." "File(s) moved to $destpath."
}}

map D delete
cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
            }}

map aa ${{
    # create a new git repo
    git init
    host='https://github.com'
    printf "host [https://github.com]: "
    read host
    host=${host:-https://github.com}
    printf "path (user/repo): "
    read path
    git remote add origin ${host}/${path}.git
    touch README.md
    git add README.md
    git commit -m 'initial commit'
        }}


map E extract 
cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && {
		case $fx in
			*.tar.bz2)   tar xjf $fx     ;;
			*.tar.gz)    tar xzf $fx     ;;
			*.bz2)       bunzip2 $fx     ;;
			*.rar)       unrar e $fx     ;;
			*.gz)        gunzip $fx      ;;
			*.tar)       tar xf $fx      ;;
			*.tbz2)      tar xjf $fx     ;;
			*.tgz)       tar xzf $fx     ;;
			*.zip)       unzip $fx       ;;
			*.Z)         uncompress $fx  ;;
			*.7z)        7z x $fx        ;;
			*.tar.xz)    tar xf $fx      ;;
		esac
	}
             }}



cmd menu ${{
    echo "c compress"
    echo "e extract"
    read -p "Choose an action: " choice
    case "$choice" in
        c)
            # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–∂–∞—Ç–∏—è
            echo "Compressing..."
            ;;
        e)
            # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
            echo "Extracting..."
            ;;
        *)
            echo "Invalid choice"
            ;;
    esac
}}



# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
